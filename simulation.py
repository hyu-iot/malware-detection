import torch
from torch.utils.data import DataLoader, ConcatDataset
import flwr as fl
from torchmetrics import F1Score

from collections import OrderedDict
from typing import List, Dict, Tuple, Optional
import os
import json
from tqdm import tqdm

from client import FLClient
from client_manager import ClientManager
from model import Net, LSTMNet
from utils import get_parameters, set_parameters, train, test, plot_metrics


DEVICE = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
EPOCH = 2
NUM_CLIENTS = 10

learning_rate = 0.01
global_round = 1

# devices = [1, 3, 7, 8, 9, 17, 20, 21, 33, 34,
#            35, 36, 39, 42, 43, 44, 48, 49, 52, 60]

#devices = [3, 8, 9, 20, 21, 34, 42, 44, 48, 60]           

devices = [3, 7, 8, 9, 20, 21, 34, 35, 48, 60]

cfg = {
    'device': 1,
    'unit_period': 60,
    'period': 600,
    'DIR_PATH': "",
    'train_ratio': 0.7,
    'random_seed': 1234,
    'batch_size': 20,
    'shuffle': True,    
}


cms = {}

for device in devices:
  config = cfg.copy()
  config['device'] = device
  config['DIR_PATH'] = f"./dataset/{device}"
  cms[device] = ClientManager(config)

valset = ConcatDataset([cm.round(0).get_dataset()[0] for cm in cms.values()])
valloader = DataLoader(
    valset,
    batch_size=cfg['batch_size'],
    shuffle=cfg['shuffle'],
)


def client_fn(cid: str) -> FLClient:
  """ Create a Flower client representing a single organization. """
  
  # Get ClientManager
  cm = cms[devices[int(cid)]]
  
  # Load model
  net = Net().to(DEVICE)

  # Load data
  trainloader, testloader = cm.round(global_round).get_dataloader()

  # Create a single Flower client representing a single organization
  return FLClient(net, trainloader, testloader, DEVICE)


# Server-side
fedavg_losses, fedavgM_losses, qfedavg_losses = [], [], []
fedavg_accuracies, fedavgM_accuracies, fedavg_accuracies = [], [], []

# The `evaluate` function will be by Flower called after every round
def evaluate(
    server_round: int, parameters: fl.common.NDArrays, config: Dict[str, fl.common.Scalar]
) -> Optional[Tuple[float, Dict[str, fl.common.Scalar]]]:
    global global_round

    net = Net()

    set_parameters(net, parameters)  # Update model with the latest parameters
    loss, accuracy, pred, target = test(net, valloader, DEVICE)
    
    global_round += 1

    f1 = F1Score(task="multiclass", num_classes=12)
    f1_score = f1(pred, target).item()

    fedavg_losses.append(loss)
    fedavg_accuracies.append(accuracy)

    print(f"Server-side evaluation loss {loss} / accuracy {accuracy}")
    return loss, {"loss": loss, "accuracy": accuracy, "f1_score": f1_score}


def fit_config (global_round: int):
    #Return training configuration dict for each round
    config = {
        "global_round": global_round,
    }
    return config

def evaluate_config (global_round: int):
    config = {
        "global_round": global_round,
    }
    return config



# Define strategies
fedavg = fl.server.strategy.FedAvg(
    fraction_fit=1.0,             # Sample 100% of available clients for training
    fraction_evaluate=0.5,        # Sample 50% of available clients for evaluation
    min_fit_clients=10,           # Never sample less than 10 clients for training
    min_evaluate_clients=5,       # Never sample less than 5 clients for evaluation
    min_available_clients=10,     # Wait until all 10 clients are available
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedavgM = fl.server.strategy.FedAvgM(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

qfedavg = fl.server.strategy.QFedAvg(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

ftfedavg = fl.server.strategy.FaultTolerantFedAvg(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedopt = fl.server.strategy.FedOpt(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedadagrad = fl.server.strategy.FedAdagrad(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedadam = fl.server.strategy.FedAdam(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedyogi = fl.server.strategy.FedYogi(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

results = {}
#strategies = [fedavg, fedavgM, qfedavg, ftfedavg, fedopt, fedadam, fedadagrad, fedyogi]
strategies = [fedavg, fedopt, fedadam, fedadagrad, fedyogi]

# Start simulation
for strategy in strategies:
    global_round = 1

    net = Net().to(DEVICE)
    hist = fl.simulation.start_simulation(
        client_fn=client_fn,
        num_clients=NUM_CLIENTS,
        config=fl.server.ServerConfig(num_rounds=50),
        strategy=strategy
    )
    results[repr(strategy).split('(')[0]] = hist.metrics_centralized


with open(f"./results/result.json", mode="w") as result_file:
    json.dump(results, result_file)

plot_metrics("./results/result.json")
