import flwr as fl
from flwr.common import Metrics
import numpy as np
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchmetrics import ConfusionMatrix, F1Score, Precision, Recall

from tqdm import tqdm
from collections import OrderedDict
from typing import List, Tuple, Optional, Dict
import itertools
import json

from utils import load_data, plot_metrics, plot_confusion_matrix
from model import Net


DEVICE = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
EPOCH = 2
learning_rate = 0.01
NUM_CLIENTS = 10

trainloaders, valloaders, testloader = load_data()


# Step 1. Centralized Training with PyTorch
def train(net, train_loader, epochs):
  """ Train the network on the training set. """
  criterion = torch.nn.CrossEntropyLoss()
  optimizer = torch.optim.SGD(net.parameters(), lr = 0.001, momentum = 0.9)

  for i in range(epochs):
    avg_cost = 0.0
    total_batch = len(train_loader)

    #for X, y in tqdm(train_loader):
    for X, y in train_loader:
      y = y.to(torch.float)
      X, y = X.to(DEVICE), y.to(DEVICE)
      optimizer.zero_grad()

      loss = criterion(net(X), y)
      loss.backward()
      optimizer.step()

      avg_cost += loss / total_batch
    
    #print(f"Epoch: {i + 1}, Cost: {avg_cost}")


def test(net, test_loader):
  """ Evaluate the network on the entire test set. """
  criterion = torch.nn.CrossEntropyLoss()
  correct, total, loss = 0, 0, 0.0

  pred = torch.Tensor([])
  target = torch.Tensor([])
  net.eval()

  with torch.no_grad():
    #for X, y in tqdm(test_loader):
    for X, y in test_loader:
        X, y = X.to(DEVICE), y.to(DEVICE)
        outputs = net(X)

        _, predicted = torch.max(outputs.data, 1)
        
        loss += criterion(outputs, y).item()
        correct += (predicted == y.argmax(-1)).sum().item()
        pred = torch.cat([pred, predicted], dim=0)
        target = torch.cat([target, y.argmax(-1)], dim=0)
        total += y.size(0)

    f1 = F1Score(task="multiclass", num_classes=31)

    loss /= len(test_loader.dataset)
    accuracy = correct / total
    f1_score = f1(pred, target).item()

    return loss, accuracy, f1_score


# ## Training the model
trainloader = trainloaders[0]
valloader = valloaders[0]
net = Net().to(DEVICE)

# for epoch in range(10):
#   train(net, trainloader, 1)
#   loss, accuracy, pred, target = test(net, valloader)

#   f1 = F1Score(task="multiclass", num_classes=31)
#   f1_score = f1(pred, target)

#   print(f"Epoch: {epoch + 1}: vallidation loss: {loss}, accuracy: {accuracy}, f1-score: {f1_score}")

# loss, accuracy, pred, target = test(net, testloader)
# cfm = ConfusionMatrix(task="multiclass", num_classes=31)
# f1 = F1Score(task="multiclass", num_classes=31)

# confusion_matrix = cfm(pred, target)
# f1_score = f1(pred, target)

# print(f"Final test set performance:\n\tloss: {loss}\n\taccuracy: {accuracy}\nf1-score: {f1_score}")

def get_parameters(net) -> List[np.ndarray]:
    return [val.cpu().numpy() for _, val in net.state_dict().items()]

def set_parameters(net, parameters: List[np.ndarray]):
    params_dict = zip(net.state_dict().keys(), parameters)
    state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})
    net.load_state_dict(state_dict, strict=True)

class FLClient(fl.client.NumPyClient):
    def __init__(self, net, trainloader, valloader):
        self.net = net
        self.trainloader = trainloader
        self.valloader = valloader

    def get_parameters(self, config):
        return get_parameters(self.net)

    def fit(self, parameters, config):
        set_parameters(self.net, parameters)
        train(self.net, self.trainloader, epochs=1)
        return get_parameters(self.net), len(self.trainloader), {}

    def evaluate(self, parameters, config):
        set_parameters(self.net, parameters)
        loss, accuracy, f1_score = test(self.net, self.valloader)
        print(f"Loss: {loss}")
        return float(loss), len(self.valloader), {"accuracy": float(accuracy), "f1_score": float(f1_score)}


# ## Using the Virtual Client Engine

def client_fn(cid: str) -> FLClient:
  """ Create a Flower client representing a single organization. """
  # Load model
  net = Net().to(DEVICE)

  # Load data
  trainloader = trainloaders[int(cid)]
  valloader = valloaders[int(cid)]

  # Create a single Flower client representing a single organization
  return FLClient(net, trainloader, valloader)

# Server-side
fedavg_losses, fedavgM_losses, qfedavg_losses = [], [], []
fedavg_accuracies, fedavgM_accuracies, fedavg_accuracies = [], [], []

# The `evaluate` function will be by Flower called after every round
def evaluate(
    server_round: int, parameters: fl.common.NDArrays, config: Dict[str, fl.common.Scalar]
) -> Optional[Tuple[float, Dict[str, fl.common.Scalar]]]:
    net = Net()
    #valloader = testloader
    set_parameters(net, parameters)  # Update model with the latest parameters
    loss, accuracy, f1_score = test(net, testloader)
    

    print(f"Server-side evaluation loss {loss} / accuracy {accuracy}")
    return loss, {"loss": loss, "accuracy": accuracy, "f1_score": f1_score}


def fit_config (global_round: int):
    #Return training configuration dict for each round
    config = {
        "global_round": global_round,
    }
    return config

def evaluate_config (global_round: int):
    config = {
        "global_round": global_round,
    }
    return config



# ## Define strategies
fedavg = fl.server.strategy.FedAvg(
    fraction_fit=1.0,             # Sample 100% of available clients for training
    fraction_evaluate=0.5,        # Sample 50% of available clients for evaluation
    min_fit_clients=10,           # Never sample less than 10 clients for training
    min_evaluate_clients=5,       # Never sample less than 5 clients for evaluation
    min_available_clients=10,     # Wait until all 10 clients are available
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedavgM = fl.server.strategy.FedAvgM(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

qfedavg = fl.server.strategy.QFedAvg(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

ftfedavg = fl.server.strategy.FaultTolerantFedAvg(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedopt = fl.server.strategy.FedOpt(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedadagrad = fl.server.strategy.FedAdagrad(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedadam = fl.server.strategy.FedAdam(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)

fedyogi = fl.server.strategy.FedYogi(
    fraction_fit=1.0,             
    fraction_evaluate=0.5,        
    min_fit_clients=10,           
    min_evaluate_clients=5,       
    min_available_clients=10,
    initial_parameters=fl.common.ndarrays_to_parameters(get_parameters(Net())),
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)


# ## Starting the training

# Create FedAvg strategy
strategy = fl.server.strategy.FedAvg(
    fraction_fit=1.0,             # Sample 100% of available clients for training
    fraction_evaluate=0.5,        # Sample 50% of available clients for evaluation
    min_fit_clients=10,           # Never sample less than 10 clients for training
    min_evaluate_clients=5,       # Never sample less than 5 clients for evaluation
    min_available_clients=10,     # Wait until all 10 clients are available
    evaluate_fn=evaluate,
    on_fit_config_fn=fit_config,
    on_evaluate_config_fn=evaluate_config,
)



results = {}
strategies = [fedavg, fedavgM, qfedavg, ftfedavg, fedopt, fedadam, fedadagrad, fedyogi]

# Start simulation
for strategy in strategies:
    net = Net().to(DEVICE)
    hist = fl.simulation.start_simulation(
        client_fn=client_fn,
        num_clients=NUM_CLIENTS,
        config=fl.server.ServerConfig(num_rounds=20),
        strategy=strategy
    )
    results[repr(strategy).split('(')[0]] = hist.metrics_centralized


with open(f"./results/result.json", mode="w") as result_file:
    json.dump(results, result_file)

plot_metrics("./results/result.json")
