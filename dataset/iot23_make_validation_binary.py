import pandas as pd
import numpy as np



def load_data(filepath):
    malware_columns = ['ts', 'uid', 'id.orig_h', 'id.orig_p', 'id.resp_h', 'id.resp_p', 
                'proto', 'service', 'duration', 'orig_bytes', 'resp_bytes', 'conn-state', 
                'local_orig', 'local_resp', 'missed_bytes', 'history', 'orig_pkts', 'orig_ip_bytes', 
                'resp_pkts', 'resp_ip_bytes', 'label', 'tunnel_parents']

    label_replacement = {
        "-   Benign   -": "Benign",
        "(empty)   Benign   -": "Benign",
        "COLnd035cNITygYHp3   Benign   -": "Benign",
        "CARhxZ3hLNVO3xYFok   Benign   -": "Benign",

        "(empty)   Malicious   C&C": "C&C",
        "-   Malicious   C&C": "C&C",

        "-   Malicious   PartOfAHorizontalPortScan": "PartOfAHorizontalPortScan",
        "(empty)   Malicious   PartOfAHorizontalPortScan": "PartOfAHorizontalPortScan",
        "-   Malicious   PartOfAHorizontalPortScan-Attack": "PartOfAHorizontalPortScan-Attack",
        "(empty)   Malicious   Okiru": "Okiru",
        "-   Malicious   Okiru": "Okiru",

        "(empty)   Malicious   DDoS": "DDoS",
        "-   Malicious   DDoS": "DDoS",
        
        "(empty)   Malicious   Attack": "Attack",
        "-   Malicious   Okiru-Attack": "Okiru-Attack",

        "-   Malicious   C&C-HeartBeat": "C&C-HeartBeat",
        "(empty)   Malicious   C&C-HeartBeat": "C&C-HeartBeat",
        "-   Malicious   C&C-HeartBeat-Attack": "C&C-HeartBeat-Attack",
        "-   Malicious   C&C-PartOfAHorizontalPortScan": "C&C-PartOfAHorizontalPortScan",      

        "-   Malicious   Attack": "Attack",
        "-   Malicious   C&C-FileDownload": "C&C-FileDownload",
        "-   Malicious   C&C-Torii": "C&C-Torii",
        "-   Malicious   FileDownload": "FileDownload",
        "-   Malicious   C&C-HeartBeat-FileDownload": "C&C-HeartBeat-FileDownload",
        "-   Malicious   C&C-Mirai": "C&C-Mirai"
    }

    df_malware = pd.read_table(
        filepath_or_buffer=filepath, 
        skiprows=7
    )   
    df_malware.columns = malware_columns

    df_malware.drop(df_malware.tail(1).index, inplace=True)

    for (k, v) in label_replacement.items():
        df_malware.loc[(df_malware.label == k), "label"] = v

    df_malware = df_malware.drop(columns=['uid', 'local_orig', 'local_resp', 'tunnel_parents'])

    df_malware['duration'] = df_malware['duration'].astype(str).replace('-','0')
    df_malware['orig_bytes'] = df_malware['orig_bytes'].astype(str).replace('-','0')
    df_malware['resp_bytes'] = df_malware['resp_bytes'].astype(str).replace('-','0')
    df_malware['ts'] = df_malware['ts'].astype(str).astype(float)

    df_malware.fillna(-1, inplace=True)


    for c in ['id.orig_h', 'id.orig_p', 'id.resp_h', 'id.resp_p', 'service', 'history']:
        df_malware[c] = df_malware[c].astype(str).replace('-', ' ')

    for c in ['orig_bytes', 'resp_bytes', 'duration']:
        df_malware[c] = pd.to_numeric(df_malware[c], errors='coerce')      


    label_counts = df_malware.label.value_counts().to_dict()

    df_label_info = pd.DataFrame(
        {
            'label': label_counts.keys(),
            'count': label_counts.values(),
        }
    )
    return df_malware, df_label_info



def get_proper_ref(df_info, index_list):
    df_result = pd.DataFrame(columns=['device', 'index'])

    for index in index_list:
        target_device, target_index = -1, -1
        prev_cum_count = 0
        for i in df_info.index:
            if index < df_info.loc[i, 'cum_count']:
                target_device = df_info.loc[i, 'device']
                target_index = index - prev_cum_count
                break
            else:
                prev_cum_count = df_info.loc[i, 'cum_count']    
        

        df_result = pd.concat([
            df_result,
            pd.DataFrame({
                'device': [target_device],
                'index': [target_index],
            })
        ], axis=0)

    df_result = df_result[df_result.device != -1]
    
    return df_result


def get_data(df_info, index_list):

    df_ref_info = get_proper_ref(df_info, index_list)
    target_label = df_info.label.unique()[0]

    df_validation = pd.DataFrame()
    for device in df_ref_info.device.unique():
        target_device_path = f"./opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-{device}-1/bro/conn.log.labeled"
        target_indexs = df_ref_info.loc[df_ref_info.device == device, 'index'].values

        print(f"Get {len(target_indexs)} {target_label} data from device {device}")
        
        df_device, _ = load_data(target_device_path)
        df_device.loc[df_device.label != 'Benign', 'label'] = 'Malicious'
        df_device = df_device.loc[df_device.label == target_label]
        
        df_validation = pd.concat([
            df_validation,
            df_device.iloc[target_indexs]
        ], axis=0)
        df_device = df_ref_info[df_ref_info.device == device]
    
    return df_validation

    

if __name__ == "__main__":

    min_num_sample = 10000
    
    val_devices = [1, 17, 33, 36, 39, 42, 43, 44, 49, 52]
    
    random_state = 1234


    df_all_info = pd.read_csv('./label_info.csv')
    df_benign_info = df_all_info.loc[df_all_info.label == 'Benign']
    df_malicious_info = df_all_info.loc[df_all_info.label != 'Benign']

    df_malicious_info = df_malicious_info.groupby(['device']).sum()
    df_malicious_info = pd.DataFrame({
        'device': df_malicious_info.index.values,
        'label' : ['Malicious'] * len(df_malicious_info),
        'count' : df_malicious_info['count'].values
    })

    num_benign = df_benign_info['count'].sum()
    num_malicious = df_malicious_info['count'].sum()


    print(f"Benign: {num_benign}\tMalicious: {num_malicious}")


    validate_benign_index = np.random.choice(num_benign, min_num_sample)
    validate_malicious_index = np.random.choice(num_malicious, min_num_sample)


    df_benign_info.sort_values(by=['device'], inplace=True)
    df_malicious_info.sort_values(by=['device'], inplace=True)


    df_benign_info['cum_count'] = df_benign_info['count'].cumsum()
    df_malicious_info['cum_count'] = df_malicious_info['count'].cumsum()

    print(f"Benign index: {validate_benign_index}")
    print(f"Malicious index: {validate_malicious_index}")
    print(f"Benign info: {df_benign_info}")
    print(f"Malicious info: {df_malicious_info}")

    df_validation = pd.DataFrame()
    df_validation = pd.concat([
        df_validation,
        get_data(df_benign_info, validate_benign_index)
    ])
    df_validation = pd.concat([
        df_validation,
        get_data(df_malicious_info, validate_malicious_index)
    ])

    df_validation = df_validation.sample(frac=1)

    df_validation.to_csv(f"./validation_binary.csv", index=False)

