import pandas as pd

import os

min_num_sample = 1000
val_devices = [1, 17, 33, 36, 39, 42, 43, 44, 49, 52]
random_state = 1234


def load_data(filepath):
    malware_columns = ['ts', 'uid', 'id.orig_h', 'id.orig_p', 'id.resp_h', 'id.resp_p', 
                'proto', 'service', 'duration', 'orig_bytes', 'resp_bytes', 'conn-state', 
                'local_orig', 'local_resp', 'missed_bytes', 'history', 'orig_pkts', 'orig_ip_bytes', 
                'resp_pkts', 'resp_ip_bytes', 'label', 'tunnel_parents']

    label_replacement = {
        "-   Benign   -": "Benign",
        "(empty)   Benign   -": "Benign",
        "COLnd035cNITygYHp3   Benign   -": "Benign",
        "CARhxZ3hLNVO3xYFok   Benign   -": "Benign",

        "(empty)   Malicious   C&C": "C&C",
        "-   Malicious   C&C": "C&C",

        "-   Malicious   PartOfAHorizontalPortScan": "PartOfAHorizontalPortScan",
        "(empty)   Malicious   PartOfAHorizontalPortScan": "PartOfAHorizontalPortScan",
        "-   Malicious   PartOfAHorizontalPortScan-Attack": "PartOfAHorizontalPortScan-Attack",
        "(empty)   Malicious   Okiru": "Okiru",
        "-   Malicious   Okiru": "Okiru",

        "(empty)   Malicious   DDoS": "DDoS",
        "-   Malicious   DDoS": "DDoS",
        
        "(empty)   Malicious   Attack": "Attack",
        "-   Malicious   Okiru-Attack": "Attack",

        "-   Malicious   C&C-HeartBeat": "C&C-HeartBeat",
        "(empty)   Malicious   C&C-HeartBeat": "C&C-HeartBeat",
        "-   Malicious   C&C-HeartBeat-Attack": "C&C-HeartBeat-Attack",
        "-   Malicious   C&C-PartOfAHorizontalPortScan": "C&C-PartOfAHorizontalPortScan",      

        "-   Malicious   Attack": "Attack",
        "-   Malicious   C&C-FileDownload": "C&C-FileDownload",
        "-   Malicious   C&C-Torii": "C&C-Torii",
        "-   Malicious   FileDownload": "FileDownload",
        "-   Malicious   C&C-HeartBeat-FileDownload": "C&C-HeartBeat-FileDownload",
        "-   Malicious   C&C-Mirai": "C&C-Mirai"
    }

    df_malware = pd.read_table(
        filepath_or_buffer=filepath, 
        skiprows=7
    )   
    df_malware.columns = malware_columns

    df_malware.drop(df_malware.tail(1).index, inplace=True)

    for (k, v) in label_replacement.items():
        df_malware.loc[(df_malware.label == k), "label"] = v

    df_malware = df_malware.drop(columns=['uid', 'local_orig', 'local_resp', 'tunnel_parents'])

    df_malware['duration'] = df_malware['duration'].astype(str).replace('-','0')
    df_malware['orig_bytes'] = df_malware['orig_bytes'].astype(str).replace('-','0')
    df_malware['resp_bytes'] = df_malware['resp_bytes'].astype(str).replace('-','0')
    df_malware['ts'] = df_malware['ts'].astype(str).astype(float)

    df_malware.fillna(-1, inplace=True)


    for c in ['id.orig_h', 'id.orig_p', 'id.resp_h', 'id.resp_p', 'service', 'history']:
        df_malware[c] = df_malware[c].astype(str).replace('-', ' ')

    for c in ['orig_bytes', 'resp_bytes', 'duration']:
        df_malware[c] = pd.to_numeric(df_malware[c], errors='coerce')      


    label_counts = df_malware.label.value_counts().to_dict()

    df_label_info = pd.DataFrame(
        {
            'label': label_counts.keys(),
            'count': label_counts.values(),
        }
    )

    return df_malware, df_label_info


df_label_info_all = pd.DataFrame(columns=['device', 'label', 'count'])
for device in val_devices:
  filepath = f"./opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-{device}-1/bro/conn.log.labeled"
  _, df_label_info = load_data(filepath)
  df_label_info['device'] = device
  df_label_info_all = pd.concat([df_label_info_all, df_label_info], axis=0)

df_label_info_all = df_label_info_all.reset_index()
df_label_info_all = df_label_info_all.drop(columns=['index'])
df_label_info_all.to_csv(f"./label_info.csv", index=False)


df_num_sample = pd.DataFrame(columns=['device', 'label', 'num_sample'])
for label in df_label_info_all.label.unique():
  total_count = df_label_info_all.loc[df_label_info_all.label == label, 'count'].sum()
  if total_count < min_num_sample:  continue
  
  label_count = df_label_info_all.loc[df_label_info_all.label == label].groupby('device')['count'].sum()
  label_count = label_count.sort_values(ascending=True)
  num_remain_device = len(label_count)
  num_remain_sample = min_num_sample

  num_samples = []
  for device, count in label_count.items():
    num_current = df_label_info_all[(df_label_info_all.device == device) & (df_label_info_all.label == label)]['count'].values[0]
    num_sample = min(int(num_remain_sample / num_remain_device), num_current)
    num_samples.append(num_sample)
    num_remain_sample -= num_sample
    num_remain_device -= 1

  df_num_sample_label = pd.DataFrame(
    {
        'device': label_count.keys(),
        'label': label,
        'num_sample': num_samples
    }
  )
  df_num_sample = pd.concat([df_num_sample, df_num_sample_label], axis=0)


df_validation = pd.DataFrame()

for device in df_num_sample.device.unique():
  filepath = f"./opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-{device}-1/bro/conn.log.labeled"
  df_malware, _ = load_data(filepath)
  df_label_info = df_num_sample.loc[df_num_sample.device == device]
  for label in df_label_info.label.unique():
    num_sample = df_label_info[df_label_info.label == label].num_sample.values[0]
    df_sample = df_malware[df_malware.label == label].sample(n=num_sample, random_state=random_state)
    df_validation = pd.concat([df_validation, df_sample], axis=0)

df_validation.to_csv(f'./validation_data.csv', index=False)
print(len(df_validation))
print(df_validation.label.value_counts())
print(df_validation.columns)

