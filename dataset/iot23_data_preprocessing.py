import pandas as pd
import numpy as np

from sklearn.preprocessing import LabelEncoder

import urllib.request


# Malware Capture
malware_1 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-1-1/bro/conn.log.labeled"
malware_3 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-3-1/bro/conn.log.labeled"
malware_7 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-7-1/bro/conn.log.labeled"
malware_8 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-8-1/bro/conn.log.labeled"
malware_9 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-9-1/bro/conn.log.labeled"
malware_17 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-17-1/bro/conn.log.labeled"
malware_20 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-20-1/bro/conn.log.labeled"
malware_21 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-21-1/bro/conn.log.labeled"
malware_33 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-33-1/bro/conn.log.labeled"
malware_34 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-34-1/bro/conn.log.labeled"
malware_35 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-35-1/bro/conn.log.labeled"
malware_36 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-36-1/bro/conn.log.labeled"
malware_39 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-39-1/bro/conn.log.labeled"
malware_42 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-42-1/bro/conn.log.labeled"
malware_43 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-43-1/bro/conn.log.labeled"
malware_44 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-44-1/bro/conn.log.labeled"
malware_48 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-48-1/bro/conn.log.labeled"
malware_49 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-49-1/bro/conn.log.labeled"
malware_52 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-52-1/bro/conn.log.labeled"
malware_60 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-60-1/bro/conn.log.labeled"


# Honeypot Capture
honeypot_4 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-Honeypot-Capture-4-1/bro/conn.log.labeled"
honeypot_5 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-Honeypot-Capture-5-1/bro/conn.log.labeled"
honeypot_7 = "opt/Malware-Project/BigDataset/IoTScenarios/CTU-Honeypot-Capture-7-1/Somfy-01/bro/conn.log.labeled"


malwares = [malware_1, malware_3, malware_7, malware_8, malware_9, malware_17,
            malware_20, malware_21, malware_33, malware_34, malware_35, malware_36,
            malware_39, malware_42, malware_43, malware_44, malware_48, malware_49, 
            malware_52, malware_60]


devices =  [1, 3, 7, 8, 9, 17, 20, 21, 33, 34, 
            35, 36, 39, 42, 43, 44, 48, 49, 52, 60]


honeypots = [honeypot_4, honeypot_5, honeypot_7]


def preprocess_data(id, period=60):
  malware_columns = ['ts', 'uid', 'id.orig_h', 'id.orig_p', 'id.resp_h', 'id.resp_p', 
                    'proto', 'service', 'duration', 'orig_bytes', 'resp_bytes', 'conn-state', 
                    'local_orig', 'local_resp', 'missed_bytes', 'history', 'orig_pkts', 'orig_ip_bytes', 
                    'resp_pkts', 'resp_ip_bytes', 'label', 'tunnel_parents']

  label_replacement = {
      "-   Benign   -": "Benign",
      "(empty)   Benign   -": "Benign",
      "COLnd035cNITygYHp3   Benign   -": "Benign",
      "CARhxZ3hLNVO3xYFok   Benign   -": "Benign",

      "(empty)   Malicious   C&C": "C&C",
      "-   Malicious   C&C": "C&C",

      "-   Malicious   PartOfAHorizontalPortScan": "PartOfAHorizontalPortScan",
      "(empty)   Malicious   PartOfAHorizontalPortScan": "PartOfAHorizontalPortScan",
      "-   Malicious   PartOfAHorizontalPortScan-Attack": "PartOfAHorizontalPortScan-Attack",
      "(empty)   Malicious   Okiru": "Okiru",
      "-   Malicious   Okiru": "Okiru",

      "(empty)   Malicious   DDoS": "DDoS",
      "-   Malicious   DDoS": "DDoS",
      
      "(empty)   Malicious   Attack": "Attack",
      "-   Malicious   Okiru-Attack": "Attack",

      "-   Malicious   C&C-HeartBeat": "C&C-HeartBeat",
      "(empty)   Malicious   C&C-HeartBeat": "C&C-HeartBeat",
      "-   Malicious   C&C-HeartBeat-Attack": "C&C-HeartBeat-Attack",
      "-   Malicious   C&C-PartOfAHorizontalPortScan": "C&C-PartOfAHorizontalPortScan",      

      "-   Malicious   Attack": "Attack",
      "-   Malicious   C&C-FileDownload": "C&C-FileDownload",
      "-   Malicious   C&C-Torii": "C&C-Torii",
      "-   Malicious   FileDownload": "FileDownload",
      "-   Malicious   C&C-HeartBeat-FileDownload": "C&C-HeartBeat-FileDownload",
      "-   Malicious   C&C-Mirai": "C&C-Mirai"
  }

  df_malware = pd.read_table(
    filepath_or_buffer=f"./opt/Malware-Project/BigDataset/IoTScenarios/CTU-IoT-Malware-Capture-{id}-1/bro/conn.log.labeled", 
    skiprows=7
  )   
  df_malware.columns = malware_columns

  df_malware.drop(df_malware.tail(1).index, inplace=True)

  for (k, v) in label_replacement.items():
    df_malware.loc[(df_malware.label == k), "label"] = v

  df_malware = df_malware.drop(columns=['uid', 'local_orig', 'local_resp', 'tunnel_parents'])

  df_malware['duration'] = df_malware['duration'].astype(str).replace('-','0')
  df_malware['orig_bytes'] = df_malware['orig_bytes'].astype(str).replace('-','0')
  df_malware['resp_bytes'] = df_malware['resp_bytes'].astype(str).replace('-','0')
  df_malware['ts'] = df_malware['ts'].astype(str).astype(float)

  df_malware.fillna(-1, inplace=True)


  for c in ['id.orig_h', 'id.orig_p', 'id.resp_h', 'id.resp_p', 'service', 'history']:
    df_malware[c] = df_malware[c].astype(str).replace('-', ' ')

  for c in ['orig_bytes', 'resp_bytes', 'duration']:
    df_malware[c] = pd.to_numeric(df_malware[c], errors='coerce')      


  start_ts, end_ts = df_malware['ts'].iloc[0], df_malware['ts'].iloc[-1]
  df_device = pd.DataFrame({
      'device': [f'Device {i}'],
      'flows': [len(df_malware)],
      'period': [end_ts - start_ts]
  })

  num_rounds = int(np.ceil((end_ts-start_ts)/period))
  for round in range(num_rounds):
    df_round = df_malware.query(f"ts >= {start_ts + period * round} & ts < {start_ts + period * (round + 1)}")    
    df_round.to_csv(f"./{id}/{id}_{period}_{round}.csv", index=False)


  return df_device.copy()


df_devices_info = pd.DataFrame(columns=['device', 'flows', 'period'])
for i, malware in enumerate(malwares):
  df_device = preprocess_data(devices[i])
  df_devices_info = pd.concat([df_devices_info, df_device], axis=0)

df_devices_info.to_csv('./iot23_analysis.csv', index=False)
