from collections import OrderedDict
from typing import List

import flwr as fl
import numpy as np
import torch

from utils import get_parameters, set_parameters, train, test

class FLClient(fl.client.NumPyClient):
    def __init__(self, net, trainloader, testloader, DEVICE):
        self.net = net
        self.trainloader = trainloader
        self.testloader = testloader
        self.device = DEVICE

    def get_parameters(self, config):
        return get_parameters(self.net)
        #return [val.cpu().numpy() for _, val in self.net.state_dict().items()]

    def fit(self, parameters, config):
        if self.trainloader is None:
          return parameters, 0, {}

        set_parameters(self.net, parameters)
        #self.set_parameters(parameters)
        train(self.net, self.trainloader, epochs=1, DEVICE=self.device)
        return get_parameters(self.net), len(self.trainloader), {}

    def evaluate(self, parameters, config):
        if self.testloader is None:
          return 1.0, 0, {"accuracy": 0.0}

        self.set_parameters(parameters)
        loss, accuracy, pred, target = test(self.net, self.testloader, DEVICE=self.device)
        return float(loss), len(self.testloader), {"accuracy": float(accuracy)}
